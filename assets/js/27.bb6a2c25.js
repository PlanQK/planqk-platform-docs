(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{326:function(t,e,s){"use strict";s.r(e);var a=s(7),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"use-github-workflows-to-deploy-to-planqk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#use-github-workflows-to-deploy-to-planqk"}},[t._v("#")]),t._v(" Use GitHub Workflows to deploy to PlanQK")]),t._v(" "),e("p",[t._v("To setup a deploy job in a GitHub workflow you can use the "),e("a",{attrs:{href:"https://github.com/marketplace/actions/update-planqk-service",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Action"),e("OutboundLink")],1),t._v(" provided by "),e("a",{attrs:{href:"https://anaqor.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Anaqor"),e("OutboundLink")],1),t._v(" to update your service on the PlanQK platform.\nIt is an easy to use wrapper around the "),e("a",{attrs:{href:"../cli-reference"}},[t._v("PlanQK CLI")]),t._v(", which ultimately updates your service.")]),t._v(" "),e("p",[t._v("To setup the workflow for a new service proceed with the "),e("a",{attrs:{href:"introduction"}},[t._v("general setup")]),t._v(" of your git repo on GitHub, such that you have wired your service code with a PlanQK service referenced in the "),e("code",[t._v("planqk.json")]),t._v(".")]),t._v(" "),e("p",[t._v("Then create a CICD-pipeline that deploys service updates on PlanQK whenever you create new releases on GitHub via the following steps that must be executed in the root your local clone of your GitHub repository:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Create the folder structure "),e("code",[t._v(".github/workflows")]),t._v(" in the root of your repository via "),e("code",[t._v("mkdir -p .github/workflows")])])]),t._v(" "),e("li",[e("p",[t._v("Create file "),e("code",[t._v("CD.yml")]),t._v(" specifying the github workflow via "),e("code",[t._v("touch .github/workflows/CD.yml")])])]),t._v(" "),e("li",[e("p",[t._v("Paste the following snippet into "),e("code",[t._v("CD.yml")]),t._v(" and save the file")]),t._v(" "),e("div",{staticClass:"language-yaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CD\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Controls when the workflow will run")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Triggers the workflow on new releases")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("release")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("types")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" released "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Allows you to run this workflow manually from the Actions tab")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("workflow_dispatch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# This workflow contains a single job called "deploy"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The type of runner that the job will run on")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Steps represent a sequence of tasks that will be executed as part of the job")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v4\n\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Updates your service on PanQK")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PlanQK/update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("action@v1\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("PLANQK_TOKEN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secrets.PLANQK_TOKEN "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("CONTEXT_ID")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secrets.CONTEXT_ID "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("Commit and push these changes to your remote via "),e("code",[t._v('git add . && git commit -m "add CD workflow" && git push')])])])]),t._v(" "),e("p",[t._v("The action "),e("code",[t._v("PlanQK/update-service-action@v1")]),t._v(" requires "),e("code",[t._v("PLANQK_TOKEN")]),t._v(" and "),e("code",[t._v("CONTEXT_ID")]),t._v(" as inputs, which you have to setup as "),e("a",{attrs:{href:"https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Repository Secretes"),e("OutboundLink")],1),t._v(" of your repository on GitHub.\nIf you have setup the repository correctly, you will find a workflow called "),e("code",[t._v("CD")]),t._v(" when navigating to the "),e("code",[t._v("Actions")]),t._v(" of your GitHub repository.\nYou can trigger the automatic deployment of service updates either manually or by creating "),e("a",{attrs:{href:"https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository",target:"_blank",rel:"noopener noreferrer"}},[t._v("releases from your codebase"),e("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);
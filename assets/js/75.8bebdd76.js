(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{371:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"d-wave-service-on-planqk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-wave-service-on-planqk"}},[t._v("#")]),t._v(" D-Wave Service on PlanQK")]),t._v(" "),a("p",[t._v("This tutorial shows how to create a D-Wave flavored PlanQK Service.\nThe guide shows step by step the certain development stages and milestones and will guide you through the whole process.\nFurther readings and information can be found in our general "),a("RouterLink",{attrs:{to:"/"}},[t._v("PlanQK Service Platform Documentation")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"preparation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preparation"}},[t._v("#")]),t._v(" Preparation")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://storage.googleapis.com/yeoman-templates/latest/template.zip",target:"_blank",rel:"noopener noreferrer"}},[t._v("Download the user code template"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("Extract the ZIP archive: "),a("code",[t._v("unzip template.zip -d planqk-dwave")])]),t._v(" "),a("li",[t._v("Open the "),a("code",[t._v("planqk-dwave")]),t._v(" in your IDE of choice, e.g., VSCode.")])]),t._v(" "),a("p",[t._v("From here, we will work inside the "),a("code",[t._v("src")]),t._v(" to folder to develop a very simple D-Wave program from scratch.\nThe final result will look like the two D-Wave examples inside the "),a("code",[t._v("examples")]),t._v(" directory.\nFirst we will develop the project towards "),a("code",[t._v("dwave-hello-ide")]),t._v(" to have a working example that can be run from within your IDE or console.\nAfterwards, we will develop the project towards "),a("code",[t._v("dwave-hello-service")]),t._v(" to upload, deploy, and operate the prepared program on the PlanQK Platform.")]),t._v(" "),a("h2",{attrs:{id:"project-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#project-setup"}},[t._v("#")]),t._v(" Project Setup")]),t._v(" "),a("p",[t._v("A D-Wave program, or a D-Wave PlanQK Service in the end, requires the D-Wave Ocean SDK.\nTherefore, open the "),a("code",[t._v("environment.yml")]),t._v(" file and add "),a("code",[t._v("dwave-ocean-sdk")]),t._v(" to the pip modules to be installed.\nAfterwards, the file should look like the following:")]),t._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" planqk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#channels:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  - conda-forge")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  - defaults")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" python"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("=3.6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("<3.10\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" pip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("=21\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" loguru "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# required")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" dwave"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ocean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("sdk\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#variables:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  LOG_LEVEL: INFO")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("You can now set up a fresh environment using Conda:")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("conda "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" environment.yml\nconda activate planqk-service\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Conda and the "),a("code",[t._v("environment.yml")]),t._v(" file are used by the PlanQK Platform at runtime.\nHowever, if you do not have Conda installed on your local computer, you may add the D-Wave Ocean SDK to the "),a("code",[t._v("requirements.txt")]),t._v(" file.\nThen, you are able to initialize a Python virtual environment using the tooling of your choice, e.g., "),a("code",[t._v("pyenv")]),t._v(" or "),a("code",[t._v("venv")]),t._v(".")]),t._v(" "),a("p",[t._v("Once you activated your virtual environment, you could install any other third-party library using "),a("code",[t._v("pip")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("With this setup, you are now able to run the Python "),a("code",[t._v("src")]),t._v(" folder as module from your console:")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("python3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" src\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"extend-the-planqk-coding-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extend-the-planqk-coding-template"}},[t._v("#")]),t._v(" Extend the PlanQK Coding Template")]),t._v(" "),a("p",[t._v("Open the "),a("code",[t._v("program.py")]),t._v(" in your IDE.\nThe "),a("code",[t._v("run()")]),t._v(" method is the main handler function and the entry point for your program.\nThe method takes two arguments:\n(1) a "),a("code",[t._v("data")]),t._v(" dictionary holding any input data being processed by the service,\nand (2) a "),a("code",[t._v("params")]),t._v(" dictionary holding additional (meta-)information for the execution such as the number of shots or the number of variational layers for a circuit.\nIt is also important that the "),a("code",[t._v("run()")]),t._v(" method returns a "),a("code",[t._v("Response")]),t._v(" object.\nIt must either be of type "),a("code",[t._v("ResultResponse")]),t._v(" in case of a successful response or of type "),a("code",[t._v("ErrorResponse")]),t._v(" in case an error occurred.")]),t._v(" "),a("p",[t._v("At this stage you can remove the whole template code from within the "),a("code",[t._v("run()")]),t._v(" method.")]),t._v(" "),a("p",[t._v("Next, you can add some D-Wave code.\nFor example, copy and paste the following code to the "),a("code",[t._v("run()")]),t._v(" method (as usual in Python, you may copy the imports to the top of the file):")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dimod\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dwave"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" LeapHybridSampler\n\nsampler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LeapHybridSampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solver"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hybrid"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbqm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dimod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("generators"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ran_r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nsample_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bqm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nsample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sample_set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsample_result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fields"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sample"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"energy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("The code first instantiates a D-Wave sampler object ("),a("code",[t._v("LeapHybridSampler")]),t._v(") and creates a random QUBO problem ("),a("code",[t._v("dimod.generators.ran_r(1, 300)")]),t._v(").\nWe execute the problem by calling the "),a("code",[t._v("sample()")]),t._v(" method of the sampler object.\nFor the sake of this demo, we select afterwards the solution with the lowest energy and extract the result data.")]),t._v(" "),a("p",[t._v("As mentioned before, we have to return an object of type "),a("code",[t._v("Response")]),t._v(".\nWe therefore can use the following code to create a json-serializable solution dictionary along with a metadata dictionary and return a respective "),a("code",[t._v("ResultResponse")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"solution"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sample_result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmetadata "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"energy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sample_result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("energy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ResultResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("metadata"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("metadata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("If you would now try to execute the code using "),a("code",[t._v("python3 -m src")]),t._v(" the program will fail with the error "),a("code",[t._v("API token not defined")]),t._v(".\nThis means the program code does not contain any authentication credentials to successfully execute the program against the D-Wave Leap cloud backend.")]),t._v(" "),a("p",[t._v("To overcome this issue you have to do several steps:\nFirst, add the following constant somewhere between the global import statements and the "),a("code",[t._v("run()")]),t._v(" method:")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("PLANQK_PERSONAL_ACCESS_TOKEN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your personal access token"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Next, go to "),a("a",{attrs:{href:"https://platform.planqk.de",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://platform.planqk.de"),a("OutboundLink")],1),t._v(', navigate to your user settings and create a "Personal Access Token" with '),a("code",[t._v("api")]),t._v(" and "),a("code",[t._v("quantum_tokens")]),t._v(" permission levels enabled (scope).\nRespectively assign your personal access token to the "),a("code",[t._v("PLANQK_PERSONAL_ACCESS_TOKEN")]),t._v(" constant.")]),t._v(" "),a("p",[t._v('Further, in your PlanQK user settings, go to "Provider Access Tokens" and add your personal D-Wave Leap access token.')]),t._v(" "),a("p",[t._v("Finally, you can change the instantiation of the "),a("code",[t._v("LeapHybridSampler")]),t._v(" object as follows:")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("sampler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LeapHybridSampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solver"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hybrid"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            endpoint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://platform.planqk.de/dwave/sapi/v2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("PLANQK_PERSONAL_ACCESS_TOKEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("When everything is set up, you can now successfully execute your program using "),a("code",[t._v("python3 -m src")]),t._v(".\nThe output should look similar to the following:")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"result"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"solution"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"0"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("-1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ..."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"metadata"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"energy"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("-3844.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Source Code (program.py)")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nTemplate for implementing services running on the PlanQK platform\n"""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" typing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Optional"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Union\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" loguru "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" logger\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Import response wrappers:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - use ResultResponse to return computation results")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - use ErrorResponse to return meaningful error messages to the caller")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("libs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return_objects "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ResultResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ErrorResponse\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Import your own libs")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("libs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utilities "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" add\n\nPLANQK_PERSONAL_ACCESS_TOKEN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your personal access token"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Optional"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Optional"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \\\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Union"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ResultResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ErrorResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n  Default entry point of your code. Start coding here!\n\n  Parameters:\n      data (Optional[Dict[str, Any]]): The input data sent by the client\n      params (Optional[Dict[str, Any]]): Contains parameters, which can be set by the client for parametrizing the execution\n\n  Returns:\n      response: (ResultResponse | ErrorResponse): Response as arbitrary json-serializable dict or an error to be passed back to the client\n  """')]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dimod\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dwave"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" LeapHybridSampler\n\n  sampler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LeapHybridSampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solver"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hybrid"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              endpoint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://platform.planqk.de/dwave/sapi/v2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("PLANQK_PERSONAL_ACCESS_TOKEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  bqm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dimod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("generators"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ran_r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  sample_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bqm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  sample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sample_set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  sample_result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fields"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sample"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"energy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"solution"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sample_result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  metadata "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"energy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sample_result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("energy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ResultResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("metadata"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("metadata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br")])])]),t._v(" "),a("h2",{attrs:{id:"containerize-your-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containerize-your-code"}},[t._v("#")]),t._v(" Containerize your Code")]),t._v(" "),a("p",[t._v("The PlanQK Coding Template already contains a "),a("code",[t._v("Dockerfile")]),t._v(" which can be used to locally build a Docker container.\nThis replicates in your local environment what the PlanQK Platform does at runtime, which is quite useful for local testing before creating a PlanQK Service on the PlanQK Platform.")]),t._v(" "),a("p",[t._v("First, from within the "),a("code",[t._v("planqk-dwave")]),t._v(" folder, build the container:")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull ghcr.io/planqk/job-template:latest-base-1.0.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" planqk-service "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("The build command packages your "),a("code",[t._v("src")]),t._v(" folder, installs respective third-party dependencies defined in the "),a("code",[t._v("environment.yml")]),t._v(" file, and prepares your code for execution.")]),t._v(" "),a("p",[t._v("This simple example does not utilize any input data nor input parameters.\nTherefore, run the container as follows (replace the value of "),a("code",[t._v("PLATFORM_TOKEN")]),t._v(" with your PlanQK personal access token):")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FRAMEWORK")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DWAVE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DWAVE_ENDPOINT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://platform.planqk.de/dwave/sapi/v2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PLATFORM_TOKEN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("add your PlanQK personal access token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("BASE64_ENCODED")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("false "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LOG_LEVEL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DEBUG "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\nplanqk-service\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("The output looks similar to the following:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('2022-11-29 14:29:30.659 | DEBUG    | __main__:<module>:18 - Template Version: 1.31.2\n2022-11-29 14:29:30.664 | DEBUG    | __main__:<module>:21 - Entry Point: app.user_code.src.program:run\n2022-11-29 14:29:30.665 | DEBUG    | __main__:<module>:24 - Selected Framework: DWAVE\n2022-11-29 14:29:30.665 | DEBUG    | __main__:<module>:39 - Token: ********63122\n2022-11-29 14:29:30.666 | DEBUG    | app.helpers:get_input_data:14 - Base64 encoded data? False\n2022-11-29 14:29:30.666 | INFO     | app.helpers:get_input_data:17 - Using input data from file \'/var/input/data/data.json\'\n2022-11-29 14:29:30.669 | DEBUG    | __main__:<module>:50 - Data (encoded=False): {}\n2022-11-29 14:29:30.669 | DEBUG    | app.helpers:get_input_params:33 - Base64 encoded params? False\n2022-11-29 14:29:30.670 | INFO     | app.helpers:get_input_params:36 - Using input params from file \'/var/input/params/params.json\'\n2022-11-29 14:29:30.671 | DEBUG    | __main__:<module>:53 - Parameter (encoded=False): {}\n2022-11-29 14:29:30.673 | INFO     | app.interceptor_framework:run:47 - Loading interceptors for framework \'DWAVE\'\n2022-11-29 14:29:30.682 | INFO     | app.interceptor_framework.framework.dwave.dwave:load_interceptors:92 - D-Wave interceptors loaded\n2022-11-29 14:29:33.128 | DEBUG    | app.interceptor_framework.framework.dwave.dwave_client_interceptor:intercept_execute:36 - Config: service_execution_id=None, endpoint=https://platform.planqk.de/dwave/sapi/v2, token=True\n2022-11-29 14:29:33.129 | INFO     | app.interceptor_framework.framework.dwave.dwave_client_interceptor:intercept_execute:44 - D-Wave config injected into \'Client.from_config()\'\n2022-11-29 14:31:36.468 | INFO     | app.handler:run:36 - Execution Time (in sec): 125.7941\n\nJob:ResultResponse: {"metadata": {"energy": -3844.0}, "result": {"solution": {"0": -1, "1": -1, "10": -1, "100": -1, ...}}}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("You are now prepared to create a PlanQK Service.")]),t._v(" "),a("h2",{attrs:{id:"create-a-planqk-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-planqk-service"}},[t._v("#")]),t._v(" Create a PlanQK Service")]),t._v(" "),a("p",[t._v("To create a PlanQK Service, you have to package your program code along with the "),a("code",[t._v("environment.yml")]),t._v(" file into a ZIP file.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Before creating the archive, modify the "),a("code",[t._v("program.py")]),t._v(" and "),a("strong",[t._v("remove your personal access token")]),t._v(".\nFor example, change the value of the "),a("code",[t._v("PLANQK_PERSONAL_ACCESS_TOKEN")]),t._v(" constant to "),a("code",[t._v("noop")]),t._v(".\nThe PlanQK Platform will instrument your code respectively such that your code runs successfully against the D-Wave Leap cloud.")])]),t._v(" "),a("p",[t._v("Execute the following command to package the program code and the required metadata files:")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zip")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" user_code.zip src environment.yml openapi-spec.yml requirements.txt\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Afterwards, navigate to "),a("a",{attrs:{href:"https://platform.planqk.de",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://platform.planqk.de"),a("OutboundLink")],1),t._v(" and create a new PlanQK Service\n("),a("RouterLink",{attrs:{to:"/managed-services/introduction.html"}},[t._v("more info")]),t._v(")\nor, if you have the "),a("RouterLink",{attrs:{to:"/cli-reference.html"}},[t._v("PlanQK CLI")]),t._v(" installed, execute the following command:")],1),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("planqk login "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("your PlanQK personal access token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nplanqk up "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--file")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("user_code.zip\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Congratulations.\nYou have successfully created your own PlanQK Service.")]),t._v(" "),a("p",[a("strong",[t._v("What's next?")])]),t._v(" "),a("p",[t._v("So, as a very fist step you may want to test your newly created service on PlanQK.\nYou can now "),a("em",[t._v("publish your service for internal use")]),t._v(" and read on how to use the service utilizing PlanQK Applications.\nJust follow the steps in the "),a("RouterLink",{attrs:{to:"/using-a-service.html"}},[t._v("Using a Service")]),t._v(" section in our documentation.")],1),t._v(" "),a("p",[t._v("As an alternative, you could also try out PlanQK Jobs with your new service.\nMore information about PlanQK Jobs and how to use them can be found in our general "),a("RouterLink",{attrs:{to:"/managed-services/managed-services-jobs.html"}},[t._v("documentation")]),t._v(".")],1)])}),[],!1,null,null,null);a.default=n.exports}}]);
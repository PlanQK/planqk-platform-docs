(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{364:function(t,e,s){"use strict";s.r(e);var a=s(7),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"sdk-reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sdk-reference"}},[t._v("#")]),t._v(" SDK Reference")]),t._v(" "),e("p",[t._v("The PlanQK Quantum SDK provides an easy way for developing quantum circuits using "),e("a",{attrs:{href:"https://pypi.org/project/qiskit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit"),e("OutboundLink")],1),t._v(" to be run on "),e("RouterLink",{attrs:{to:"/quantum-hardware.html"}},[t._v("quantum hardware and simulators supported")]),t._v(" by the "),e("a",{attrs:{href:"https://docs.platform.planqk.de",target:"_blank",rel:"noopener noreferrer"}},[t._v("PlanQK Platform"),e("OutboundLink")],1),t._v(".\nIt is an "),e("strong",[t._v("extension")]),t._v(" for the "),e("a",{attrs:{href:"https://github.com/Qiskit/qiskit-metapackage",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit SDK"),e("OutboundLink")],1),t._v(".\nThis means that you're able to seamlessly integrate and reuse your existing Qiskit code, leveraging the power and familiarity of a framework you're already accustomed to.")],1),t._v(" "),e("p",[t._v("If you are using "),e("a",{attrs:{href:"https://pennylane.ai",target:"_blank",rel:"noopener noreferrer"}},[t._v("PennyLane"),e("OutboundLink")],1),t._v(" to implement your quantum machine learning algorithms, you can use the "),e("a",{attrs:{href:"#pennylane-integration"}},[t._v("SDK along with the PennyLane-Qiskit plugin")]),t._v(" to run them on the quantum hardware provided by the PlanQK Platform.")]),t._v(" "),e("h2",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),e("p",[t._v("The package is released on PyPI and can be installed via "),e("code",[t._v("pip")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("pip "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--upgrade")]),t._v(" planqk-quantum\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"using-the-sdk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-the-sdk"}},[t._v("#")]),t._v(" Using the SDK")]),t._v(" "),e("p",[t._v("The SDK, based on Qiskit, enables access to quantum hardware and simulators using the Qiskit syntax. To list and access the quantum backends supported by Planqk, you will need to use either the "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(" or the "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(" class.\nThe latter one can be only used to access the IBM backends while the former one is used to access all backends.")]),t._v(" "),e("h3",{attrs:{id:"authentication"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authentication"}},[t._v("#")]),t._v(" Authentication")]),t._v(" "),e("p",[t._v("To use the SDK, you need to authenticate using an access token with at least the "),e("code",[t._v("quantum-tokens")]),t._v(" scope.\nThe token can be generated "),e("a",{attrs:{href:"https://platform.planqk.de/settings/access-tokens",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".\nThis token can be set in two ways:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Automatically, by logging in through the "),e("RouterLink",{attrs:{to:"/quickstart.html#_3-login-to-your-account"}},[t._v("PlanQK CLI")]),t._v(". The command to login via CLI is "),e("code",[t._v("planqk login -t <your_access_token>")]),t._v(". This method will automatically inject the access token when you instantiate the "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(" class. If you want to log in with your organization you need to additionally execute "),e("code",[t._v("planqk set-context")]),t._v(" and select the organization.")],1)]),t._v(" "),e("li",[e("p",[t._v("Explicitly, during instantiation of the "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(" or the "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(" class as shown in the example below. This method overrides any access token that has been automatically injected through the PlanQK CLI login. You can optionally pass the organization id as a parameter, if you want to execute your circuit using your organization's account.")])])]),t._v(" "),e("p",[t._v("If the access token is not set or if it is invalid or has expired, an "),e("code",[t._v("InvalidAccessTokenError")]),t._v(" is thrown.\nYou need to generate a new token and login again.")]),t._v(" "),e("p",[t._v("If you want to login with your organization, you can additionally pass the organization id as a parameter.")]),t._v(" "),e("h3",{attrs:{id:"provider-access-token-for-ibm-backends"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provider-access-token-for-ibm-backends"}},[t._v("#")]),t._v(" Provider Access Token for IBM Backends")]),t._v(" "),e("p",[t._v("To utilize IBM backends through the "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(" or the "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(", it is essential to supply your IBM API access token.\nThis token can be obtained from either IBM Quantum or IBM Cloud.\nYou should enter this token into your "),e("a",{attrs:{href:"https://platform.planqk.de/settings/backend-tokens",target:"_blank",rel:"noopener noreferrer"}},[t._v("Provider Access Token settings"),e("OutboundLink")],1),t._v('.\nPlanQK utilizes this token to determine the backends you are authorized to access and to facilitate interaction with these backends.\nFor accessing backends provided by IBM Quantum, you must input the specific "IBM Quantum" token.\nSimilarly, for IBM Cloud backends, the "IBM Cloud" token is required.')]),t._v(" "),e("h3",{attrs:{id:"example-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-usage"}},[t._v("#")]),t._v(" Example Usage")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" planqk"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("qiskit "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PlanqkQuantumProvider\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Initialize the provider with your access token, and optionally your organization id")]),t._v("\nprovider "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PlanqkQuantumProvider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("access_token"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your_access_token"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" organization_id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your_organization_id"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nbackends "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" provider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backends"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Select a certain backend")]),t._v("\nbackend "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" provider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_backend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"azure.ionq.simulator"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),e("p",[t._v("Note: You need to set an access token having at least the "),e("code",[t._v("quantum-tokens")]),t._v(" scope to use the PlanqkQuantumProvider class.\nYou can either set it explicitly in the constructor "),e("code",[t._v('PlanqkQuantumProvider(access_token = "my_token")')]),t._v(" or use the "),e("RouterLink",{attrs:{to:"/quickstart.html#_3-login-to-your-account"}},[t._v("PlanQK CLI to login")]),t._v(".\nIn latter case the token is automatically applied when you instantiate the "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(" class.\nIf the access token is not set or if it is invalid, an "),e("code",[t._v("InvalidAccessTokenError")]),t._v(" is thrown.\nYou can generate a new token "),e("a",{attrs:{href:"https://platform.planqk.de/settings/access-tokens",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".\nIf you apply the token through login, you need to log in again with the PlanQK CLI and pass the new token as argument.")],1)]),t._v(" "),e("h2",{attrs:{id:"supported-operations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#supported-operations"}},[t._v("#")]),t._v(" Supported Operations")]),t._v(" "),e("h3",{attrs:{id:"planqkquantumprovider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#planqkquantumprovider"}},[t._v("#")]),t._v(" PlanqkQuantumProvider")]),t._v(" "),e("p",[t._v("This section provides a brief overview of the most important classes and methods in the SDK. For a more detailed description, please refer to the SDK's API documentation.")]),t._v(" "),e("h4",{attrs:{id:"provider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provider"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(" class is an extension for the "),e("a",{attrs:{href:"https://qiskit.org/documentation/stubs/qiskit.providers.ProviderV1.get_backend.html#qiskit.providers.ProviderV1.get_backend",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit Provider"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Method")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("backends()")])]),t._v(" "),e("td",[t._v("This method returns a list of backends supported by PlanQK. Please note that currently, backend filtering is not supported.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("get_backend(name)")])]),t._v(" "),e("td",[t._v("This method returns a single backend that matches the specified name. If the backend cannot be found, a "),e("code",[t._v("PlanqkClientError")]),t._v(" is thrown.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("jobs()")])]),t._v(" "),e("td",[t._v("This method retrieves a list of all jobs created by the user, sorted by their creation date with the newest jobs listed first.")])])])]),t._v(" "),e("h4",{attrs:{id:"backend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#backend"}},[t._v("#")]),t._v(" Backend")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("PlanqkBackend")]),t._v(" class represents a "),e("a",{attrs:{href:"https://qiskit.org/documentation/stubs/qiskit.providers.BackendV2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit Backend"),e("OutboundLink")],1),t._v(".\nIt provides information about quantum backends (e.g., number of qubits, qubit connectivity, etc.) and enables you to run quantum circuits on the backend.\nPlease note that currently, only circuits with gate-based operations are supported while pulse-based operations are not supported.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("PlanqkBackend")]),t._v(" class supports the following methods:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Method")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("configuration()")])]),t._v(" "),e("td",[t._v("Returns the backend configuration data. This method is included for compatibility with older versions of Qiskit.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("run(circuit, shots)")])]),t._v(" "),e("td",[t._v("Executes a single circuit on the backend as a job (multiple circuits are currently not supported). You also need to specify the number of shots. The minimum and maximum number of supported shots differ for each backend and can be obtained from the backend properties "),e("code",[t._v("min_shots")]),t._v(" and "),e("code",[t._v("max_shots")]),t._v(", respectively. A "),e("code",[t._v("PlanqkClientError")]),t._v(" is thrown if the job input is invalid or if the designated backend is offline and does not accept new jobs in the moment.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("retrieve_job(job_id)")])]),t._v(" "),e("td",[t._v("Retrieves a job from the backend using the provided id. If a job cannot be found a "),e("code",[t._v("PlanqkClientError")]),t._v(" is thrown.")])])])]),t._v(" "),e("p",[t._v("This example shows how to run a circuit on a backend:")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create a circuit")]),t._v("\ncircuit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" QuantumCircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measure"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run the circuit on the backend")]),t._v("\njob "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" backend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shots"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Retrieve a job by id")]),t._v("\njob "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" backend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("retrieve_job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6ac422ad-c854-4af4-b37a-efabb159d92e"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("h4",{attrs:{id:"jobs-results"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jobs-results"}},[t._v("#")]),t._v(" Jobs & Results")]),t._v(" "),e("p",[t._v("The class "),e("code",[t._v("PlanqkJob")]),t._v(" represents a "),e("a",{attrs:{href:"https://qiskit.org/documentation/stubs/qiskit.providers.JobV1.html#jobv1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit Job"),e("OutboundLink")],1),t._v(".\nIt provides status information about a job (e.g., job id, status, etc.) and enables you to access the job result as soon as the job execution has completed successfully.")]),t._v(" "),e("h5",{attrs:{id:"methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Method")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("status()")])]),t._v(" "),e("td",[t._v("Returns the status of the job. The "),e("a",{attrs:{href:"https://qiskit.org/documentation/stubs/qiskit.providers.JobStatus.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit job states"),e("OutboundLink")],1),t._v(" are: "),e("code",[t._v("INITIALIZING")]),t._v(", "),e("code",[t._v("QUEUED")]),t._v(", "),e("code",[t._v("RUNNING")]),t._v(", "),e("code",[t._v("CANCELLED")]),t._v(", "),e("code",[t._v("DONE")]),t._v(", "),e("code",[t._v("ERROR")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("result()")])]),t._v(" "),e("td",[t._v("Returns the result of the job. It blocks until the job execution has completed successfully. If the job execution has failed, a "),e("code",[t._v("PlanqkClientError")]),t._v(" is thrown indicating that the job result is not available.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("cancel()")])]),t._v(" "),e("td",[t._v("Cancels the job execution. If the job execution has already completed or if it has failed, this method has no effect.")])])])]),t._v(" "),e("h5",{attrs:{id:"results"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#results"}},[t._v("#")]),t._v(" Results")]),t._v(" "),e("p",[t._v("The type of result depends on the backend where the job was executed. Currently, only measurement result histograms are supported.\nThe histogram is represented as a dictionary where the keys are the measured qubit states and the values are the number of occurrences.\nThe measured qubit states are represented as bit-strings where the qubit farthest to the right is the most significant and has the highest index (little-endian).\nIf supported by the backend, the result also contains the memory of the job execution, i.e., the qubit state of each individual shot.")]),t._v(" "),e("h5",{attrs:{id:"attributes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attributes"}},[t._v("#")]),t._v(" Attributes")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Attribute")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("counts")])]),t._v(" "),e("td",[t._v("Returns the histogram of the job result as a JSON dict.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("memory")])]),t._v(" "),e("td",[t._v("Returns the memory as a JSON dict.")])])])]),t._v(" "),e("p",[t._v("Here is an example of how to access these attributes:")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Expected output, e.g., {"11": 6, "00": 4}')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expected output, e.g., ['00', '11', '11', '00', '11', '00', '11', '11', '00', '11']")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h3",{attrs:{id:"planqkqiskitruntimeservice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#planqkqiskitruntimeservice"}},[t._v("#")]),t._v(" PlanqkQiskitRuntimeService")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(" class is an extension of the "),e("a",{attrs:{href:"https://qiskit.org/ecosystem/ibm-runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit Runtime Service"),e("OutboundLink")],1),t._v(".\nIt enables you to run quantum circuits on the IBM backends using the Qiskit Runtime.\nThe framework provides computational primitives tailored for fundamental quantum computing operations, enhanced with integrated error suppression and mitigation functionalities.\nThese primitives operate within sessions, enabling the joint execution of multiple circuits on a quantum device without being interrupted by other users’ jobs.\nThis results in a significant reduction of the overall execution time.\nIn the example below two circuits are executed within the same session.\nThe first job waits in the queue. The session starts, if this job is executed on the backend.\nAfter the first job is finished, the second job of the session is instantly executed on the backend without being queued again.")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("service "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PlanqkQiskitRuntimeService"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit_1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" QuantumCircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ncircuit_2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" QuantumCircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" Session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" backend"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ibmq_qasm_simulator"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Submit a request to the Sampler primitive within the session.")]),t._v("\n    sampler "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sampler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("session"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    job "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sampler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circuits"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("circuit_1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-interpolation"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Sampler results: ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    job "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sampler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circuits"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("circuit_2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-interpolation"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Sampler results: ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("h4",{attrs:{id:"provider-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provider-2"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),e("p",[t._v("To initialize and use the "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(" class, it's essential to first configure it with your specific API token from IBM.\nThis token could either be from IBM Quantum or IBM Cloud, depending on your requirements.\nDetailed instructions for obtaining and setting up your API token are available in the section "),e("a",{attrs:{href:"#provider-access-token-for-ibm-backends"}},[t._v("Provider Access Token for IBM Backends")]),t._v(".\nSuch as the "),e("code",[t._v("PlanqkQuantumProvider")]),t._v(", the "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(" also provides the methods for retrieving backends:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Method")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("backends()")])]),t._v(" "),e("td",[t._v("This method returns a list of backends supported by the "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("get_backend(name)")])]),t._v(" "),e("td",[t._v("This method returns a single backend that matches the specified name. If the backend cannot be found or if it is not supported, a "),e("code",[t._v("QiskitBackendNotFoundError")]),t._v(" is thrown.")])])])]),t._v(" "),e("h4",{attrs:{id:"session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[t._v("#")]),t._v(" Session")]),t._v(" "),e("p",[t._v("As session groups a collection of iterative job execution calls to a quantum computer.\nA session is created by instantiating the "),e("code",[t._v("Session")]),t._v(" class.\nTo instantiate a session, you need to provide the following constructor parameters:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("service")]),t._v(" - Must be set to a "),e("code",[t._v("PlanqkQiskitRuntimeService")]),t._v(" object.")]),t._v(" "),e("li",[e("code",[t._v("backend")]),t._v(" - The name of the backend you want to use.")])]),t._v(" "),e("p",[t._v("More detailed information about the attributes and methods provided by the "),e("code",[t._v("Session")]),t._v(" calls can be found "),e("a",{attrs:{href:"https://qiskit.org/ecosystem/ibm-runtime/stubs/qiskit_ibm_runtime.Session.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"primitives"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#primitives"}},[t._v("#")]),t._v(" Primitives")]),t._v(" "),e("p",[t._v("Primitives are core functions that make it easier to build modular algorithms and applications.\nThey enhance the ways how users can run jobs on quantum computers.\nCurrently, the "),e("code",[t._v("Sampler")]),t._v(" and the "),e("code",[t._v("Estimator")]),t._v(" primitives are supported.")]),t._v(" "),e("h5",{attrs:{id:"sampler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sampler"}},[t._v("#")]),t._v(" Sampler")]),t._v(" "),e("p",[t._v("This primitive is similar to the "),e("code",[t._v("backend.run()")]),t._v(" operation."),e("br"),t._v("\nIt takes circuits as input and returns a quasi-probability distribution over the measurement outcomes.\nThis generalizes histograms from quantum circuits, allowing for mitigation of readout errors.\nMore information about using this primitive can be found "),e("a",{attrs:{href:"https://qiskit.org/ecosystem/ibm-runtime/tutorials/how-to-getting-started-with-sampler.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h5",{attrs:{id:"estimator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#estimator"}},[t._v("#")]),t._v(" Estimator")]),t._v(" "),e("p",[t._v("The estimator primitive allows you to efficiently calculate and interpret expectation values of quantum operators.\nYou specify circuits that prepare quantum states and then Pauli-basis observables to measure on those states.\nThe estimator can use advanced error suppression and mitigation capabilities to improve the accuracy of the returned expectation values.")]),t._v(" "),e("p",[t._v("To use the estimator, you need to create a circuit and one or more observables, that represent the physical properties of your quantum system you want to measure.\nYou run the estimator as job by passing the circuit and the observables to the "),e("code",[t._v("Estimator")]),t._v(" primitive within a session.")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("circuit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" QuantumCircuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nobservable "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SparsePauliOp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XZ"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" Session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" backend"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ibmq_qasm_simulator"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Submit a request to the Estimator primitive within the session.")]),t._v("\n    estimator "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Estimator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("session"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    job "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" estimator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circuits"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("circuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" observables"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("observable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-interpolation"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"Estimator results: ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("job"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("p",[t._v("More information about the estimator primitive can be found "),e("a",{attrs:{href:"https://qiskit.org/ecosystem/ibm-runtime/tutorials/how-to-getting-started-with-estimator.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h5",{attrs:{id:"jobs-results-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jobs-results-2"}},[t._v("#")]),t._v(" Jobs & Results")]),t._v(" "),e("p",[t._v("The class "),e("code",[t._v("PlanqkRuntimeJob")]),t._v(" represents a "),e("a",{attrs:{href:"https://qiskit.org/ecosystem/ibm-runtime/stubs/qiskit_ibm_runtime.RuntimeJob.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Qiskit Runtime Job"),e("OutboundLink")],1),t._v(".\nIt provides status information about a job (e.g., job id, status, etc.) and enables you to access the job result as soon as the job execution has completed successfully.\nThe "),e("code",[t._v("PlanqkRuntimeJob")]),t._v(" class supports the same methods as the "),e("a",{attrs:{href:"#jobs-results"}},[t._v("PlanqkJob class")]),t._v(", i.e. "),e("code",[t._v("status()")]),t._v(", "),e("code",[t._v("result()")]),t._v(" and "),e("code",[t._v("cancel()")]),t._v(".\nSupport for streaming results, logs, and intermediate results is currently not available and will be added in a future release.")]),t._v(" "),e("p",[t._v("The format result of a "),e("code",[t._v("PlanqkRuntimeJob")]),t._v(" depends on the primitive that was used to run the job.")]),t._v(" "),e("h2",{attrs:{id:"pennylane-integration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pennylane-integration"}},[t._v("#")]),t._v(" PennyLane Integration")]),t._v(" "),e("p",[t._v("To use the SDK with PennyLane, you need to install the "),e("a",{attrs:{href:"https://docs.pennylane.ai/projects/qiskit/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PennyLane-Qiskit plugin"),e("OutboundLink")],1),t._v(" by adding\nthe "),e("code",[t._v("pennylane-qiskit")]),t._v(" package to your Python project dependencies, e.g., by running "),e("code",[t._v("pip install pennylane-qiskit")]),t._v(".")]),t._v(" "),e("p",[t._v("To execute a PennyLane circuit using a PlanQK backend, first, retrieve the desired backend using the "),e("a",{attrs:{href:"#planqkquantumprovider"}},[t._v("PlanqkQuantumProvider")]),t._v("."),e("br"),t._v("\nThen, create a "),e("code",[t._v("qiskit.remote")]),t._v(" device and pass the PlanQK backend to it.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),e("p",[t._v("Currently, the IBM backends offered by PlanQK cannot be accessed with PennyLane.")])]),t._v(" "),e("p",[t._v("In the following example a remote device that uses the "),e("code",[t._v("azure.ionq.simulator")]),t._v(" backend is created.")]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("provider "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PlanqkQuantumProvider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbackend "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" provider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_backend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"azure.ionq.simulator"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndevice "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("device"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qiskit.remote'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wires"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" backend"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("backend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shots"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("qnode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("device"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("circuit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Hadamard"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wires"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CNOT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wires"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PauliZ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("qml"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PauliZ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nresult "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" circuit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h2",{attrs:{id:"what-s-next"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-s-next"}},[t._v("#")]),t._v(" What's next?")]),t._v(" "),e("ul",[e("li",[t._v("See our supported "),e("RouterLink",{attrs:{to:"/quantum-hardware.html"}},[t._v("quantum hardware and simulators")])],1),t._v(" "),e("li",[t._v("Check out the "),e("RouterLink",{attrs:{to:"/tutorials/tutorial-qiskit.html"}},[t._v("Tutorial on how to create a PlanQK Service using the PlanQK Quantum SDK")]),t._v(".")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);
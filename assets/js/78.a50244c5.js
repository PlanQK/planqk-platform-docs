(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{375:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"execute-qiskit-circuits-using-the-planqk-quantum-sdk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execute-qiskit-circuits-using-the-planqk-quantum-sdk"}},[t._v("#")]),t._v(" Execute Qiskit Circuits using the PlanQK Quantum SDK")]),t._v(" "),a("p",[t._v("This tutorial describes how you can use the PlanQK Quantum SDK to execute your Qiskit code on different quantum backends supported by PlanQK.\nThe SDK is a wrapper for Qiskit 1.0.\nHence, it provides the same functionality and syntax as the original Qiskit SDK.")]),t._v(" "),a("p",[t._v("You can use the SDK either directly from your favorite IDE or in a "),a("RouterLink",{attrs:{to:"/managed-services/introduction.html"}},[t._v("PlanQK service")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"install-the-planqk-quantum-sdk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-the-planqk-quantum-sdk"}},[t._v("#")]),t._v(" Install the PlanQK Quantum SDK")]),t._v(" "),a("p",[t._v("To install the PlanQK Quantum SDK you need to have Python 3.8 or higher installed.\nThe package is released on PyPI and can be installed via "),a("code",[t._v("pip")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" planqk-quantum\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"create-an-access-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-an-access-token"}},[t._v("#")]),t._v(" Create an Access Token")]),t._v(" "),a("p",[t._v("To access the quantum backends from your Qiskit code you need to have a valid PlanQK account and a quantum access token.\nThis token is used to authenticate your requests to the PlanQK platform and to track the usage costs of your quantum executions.")]),t._v(" "),a("p",[t._v("Login at "),a("a",{attrs:{href:"https://platform.planqk.de",target:"_blank",rel:"noopener noreferrer"}},[t._v("platform.planqk.de"),a("OutboundLink")],1),t._v(", go to "),a("code",[t._v("Settings")]),t._v(" and create a new "),a("code",[t._v("Personal Access Token")]),t._v(" with the scopes "),a("code",[t._v("api")]),t._v(" and "),a("code",[t._v("quantum_tokens")]),t._v(".\nCopy your new token and store it in a safe place.")]),t._v(" "),a("h2",{attrs:{id:"backend-selection-and-execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backend-selection-and-execution"}},[t._v("#")]),t._v(" Backend Selection and Execution")]),t._v(" "),a("p",[t._v("In your Qiskit code you can access the PlanQK quantum backends through the "),a("code",[t._v("PlanqkQuantumProvider")]),t._v(" object.\nYou need to import this object and pass your access token to it, as shown in the example below.")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" planqk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("qiskit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PlanqkQuantumProvider\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set your PlanQK access token")]),t._v("\nplanqk_token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YOUR_ACCESS_TOKEN"')]),t._v("\nprovider "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PlanqkQuantumProvider"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("access_token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("planqk_token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("If your Qiskit code is executed in a PlanQK service, the access token is automatically set by the platform.\nIn this case the "),a("code",[t._v("access_token")]),t._v(" parameter can be omitted.\nIf it is set it is replaced by the service token.")])]),t._v(" "),a("p",[t._v("After you have created the provider object you can list all backends supported by the PlanQK platform and select the one you want to use, e.g., the "),a("code",[t._v("azure.ionq.simulator")]),t._v(" backend:")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list all available PlanQK quantum backends")]),t._v("\nbackends "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" planqk_provider"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backends"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# select certain backend")]),t._v("\nbackend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" provider"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"azure.ionq.simulator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("Now you can execute your Qiskit circuit on the selected backend, retrieve its "),a("code",[t._v("job")]),t._v(" object, retrieve its results, cancel it etc.")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" qiskit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("circuit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" QuantumCircuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" transpile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create a qiskit circuit")]),t._v("\ncircuit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" QuantumCircuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncircuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# transpile circuit for backend")]),t._v("\ncircuit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" transpile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# execute circuit on selected backend")]),t._v("\njob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circuit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shots"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("NOTE")]),t._v(" "),a("p",[t._v("Executing your Qiskit code on the PlanQK platform may lead to execution costs depending on selected backend and number of shots.\nPlease find an overview about the costs for each backend on "),a("a",{attrs:{href:"https://platform.planqk.de/pricing",target:"_blank",rel:"noopener noreferrer"}},[t._v("our pricing page"),a("OutboundLink")],1),t._v(".")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
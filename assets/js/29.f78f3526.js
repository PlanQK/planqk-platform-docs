(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{324:function(e,t,a){"use strict";a.r(t);var o=a(7),n=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"cicd-integration-with-planqk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cicd-integration-with-planqk"}},[e._v("#")]),e._v(" CICD-Integration with PlanQK")]),e._v(" "),t("p",[e._v("You can integrate PlanQK with your CICD-pipelines to continuously deploy and update your services running on the PlanQK platform using the "),t("a",{attrs:{href:"../cli-reference"}},[e._v("PlanQK CLI")]),e._v(" to setup a deploy stage.\nIn the following, the general strategy is described how to leverage the CLI along with the required prerequisites.\nYou can use this strategy as a blueprint to develop your own CICD-integrations, nevertheless, we provide also directly usable templates for several CICD-systems as listed by the table below.")]),e._v(" "),t("h2",{attrs:{id:"general-strategy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-strategy"}},[e._v("#")]),e._v(" General Strategy")]),e._v(" "),t("h3",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),t("ol",[t("li",[e._v("Setup a git repository and clone it to your machine, note that the following steps assume that you are in the folder of the git repository on your local machine")]),e._v(" "),t("li",[e._v("Install the "),t("a",{attrs:{href:"../cli-reference"}},[e._v("PlanQK CLI")])]),e._v(" "),t("li",[e._v("Create a "),t("a",{attrs:{href:"../manage-access-tokens"}},[e._v("PlanQK Access Token")])])]),e._v(" "),t("h3",{attrs:{id:"general-setup-to-automate-the-deployment-of-your-code-to-planqk-services"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-setup-to-automate-the-deployment-of-your-code-to-planqk-services"}},[e._v("#")]),e._v(" General Setup to automate the Deployment of your code to PlanQK Services")]),e._v(" "),t("p",[e._v("To automate the deployment of your code to a service on PlanQK, you have to setup your codebase and wire it with the targeted service.\nThis can easily be done by using the PlanQK CLI to initially create a service from your codebase, which automatically saves the "),t("code",[e._v("serviceId")]),e._v(" of the created service in the "),t("code",[e._v("planqk.json")]),e._v(" of your codebase.\nThe following steps show how you can scaffold an initial service implementation and create a service on PlanQK, which is then wired with the service implementation.")]),e._v(" "),t("ol",[t("li",[e._v("Authorize the CLI with your "),t("a",{attrs:{href:"../manage-access-tokens"}},[e._v("PlanQK Access Token")]),e._v(" via "),t("code",[e._v("planqk login -t <your-token>")])]),e._v(" "),t("li",[e._v("Setup a project using "),t("code",[e._v("planqk init")]),e._v(" of the "),t("a",{attrs:{href:"../cli-reference"}},[e._v("PlanQK CLI")])]),e._v(" "),t("li",[e._v("Chose the context the service shall be deployed to on PlanQK via "),t("code",[e._v("planqk set-context <context-id>")]),e._v(" (you can list your available contexts via "),t("code",[e._v("planqk list-contexts")]),e._v(")")]),e._v(" "),t("li",[e._v("Create the service on PlanQK via "),t("code",[e._v("planqk up")])]),e._v(" "),t("li",[e._v("Commit this state to your git repository ("),t("code",[e._v('git add . && git commit -m "initial commit"')]),e._v(") and push it to your remote ("),t("code",[e._v("git push")]),e._v(")")])]),e._v(" "),t("p",[e._v("You will recognize that the service is created on PlanQK and that the ID of the created service is set as "),t("code",[e._v("serviceId")]),e._v(" in the "),t("code",[e._v("planqk.json")]),e._v(" in your codebase.\nThis way, your codebase is wired with a specific service on PlanQK and whenever you execute "),t("code",[e._v("planqk up")]),e._v(" again, the service will be updated with the state of your codebase.\nYou can make use of this mechanism in your CICD-pipeline to create a deploy job that can be triggered on events like new releases or even pushes to your codebase.\nThereby, assure that your install the "),t("a",{attrs:{href:"../cli-reference"}},[e._v("PlanQK CLI")]),e._v(" in your deploy job, provide it with the respective "),t("a",{attrs:{href:"../manage-access-tokens"}},[e._v("PlanQK Access Token")]),e._v(" and context-id.\nThen, the deploy job can deploy an updated version of your service via "),t("code",[e._v("planqk up")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);